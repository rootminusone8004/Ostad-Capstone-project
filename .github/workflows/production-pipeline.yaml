name: Production CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: mdarifahammedreza
  IMAGE_NAME: ostad-capstone
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  code-quality-and-coverage:
    name: Code Quality & Coverage Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: Result/package-lock.json
        
    - name: Install dependencies
      working-directory: ./Result
      run: |
        npm ci
        
    - name: Run tests with coverage
      working-directory: ./Result
      run: |
        npm run test:coverage || npm run test -- --coverage --watchAll=false
        
    - name: SonarQube Scan
      uses: sonarqube-quality-gate-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        scanMetadataReportFile: Result/coverage/sonar-report.json
        
    - name: Quality Gate Check
      uses: sonarqube-quality-gate-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      timeout-minutes: 5
      with:
        scanMetadataReportFile: Result/coverage/sonar-report.json

  pull-and-deploy:
    name: Pull Docker Image & Deploy to Production
    runs-on: self-hosted
    needs: code-quality-and-coverage
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Pull latest Docker image from stage
      run: |
        docker pull ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:stage-latest
        docker tag ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:stage-latest ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        docker tag ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:stage-latest ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:prod-${{ github.sha }}
        
    - name: Push production tags
      run: |
        docker push ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:prod-${{ github.sha }}
        
    - name: Deploy to production
      run: |
        docker-compose -f docker-compose.production.yml down || true
        docker-compose -f docker-compose.production.yml pull
        docker-compose -f docker-compose.production.yml up -d
        
    - name: Health check
      run: |
        echo "Waiting for application to start..."
        sleep 30
        
        # Health check with retry logic
        for i in {1..10}; do
          if curl -f http://localhost:80/health; then
            echo "Application is healthy!"
            break
          else
            echo "Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          fi
          
          if [ $i -eq 10 ]; then
            echo "Health check failed after 10 attempts"
            exit 1
          fi
        done
        
    - name: Update ArgoCD Application (if configured)
      run: |
        # This would sync the ArgoCD application to deploy the latest changes
        # Requires ArgoCD CLI and proper authentication setup
        if command -v argocd &> /dev/null; then
          argocd app sync ostad-capstone-production --strategy hook --timeout 300
          argocd app wait ostad-capstone-production --timeout 300
        else
          echo "ArgoCD CLI not available, skipping sync"
        fi

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: pull-and-deploy
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

