# Canary Deployment Strategy

# Main Production Deployment (Stable)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ostad-capstone-stable
  namespace: prod
  labels:
    app: ostad-capstone
    strategy: canary
    track: stable
    version: v1.0.0
spec:
  replicas: 4  # 80% of traffic
  selector:
    matchLabels:
      app: ostad-capstone
      track: stable
  template:
    metadata:
      labels:
        app: ostad-capstone
        strategy: canary
        track: stable
        version: v1.0.0
    spec:
      containers:
      - name: ostad-app
        image: ostad-capstone:v1.0.0
        ports:
        - containerPort: 3000
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
---
# Canary Deployment (New Version)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ostad-capstone-canary
  namespace: prod
  labels:
    app: ostad-capstone
    strategy: canary
    track: canary
    version: v2.0.0
spec:
  replicas: 1  # 20% of traffic
  selector:
    matchLabels:
      app: ostad-capstone
      track: canary
  template:
    metadata:
      labels:
        app: ostad-capstone
        strategy: canary
        track: canary
        version: v2.0.0
    spec:
      containers:
      - name: ostad-app
        image: ostad-capstone:v2.0.0
        ports:
        - containerPort: 3000
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
---
# Service - Routes to both stable and canary
apiVersion: v1
kind: Service
metadata:
  name: ostad-capstone-canary-service
  namespace: prod
  labels:
    app: ostad-capstone
    strategy: canary
spec:
  selector:
    app: ostad-capstone
    # No track selector - routes to both stable and canary
  ports:
  - port: 80
    targetPort: 3000
---
# Ingress with traffic splitting (requires NGINX Ingress Controller)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ostad-capstone-canary-ingress
  namespace: prod
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/canary: "true"
    nginx.ingress.kubernetes.io/canary-weight: "20"  # 20% traffic to canary
    nginx.ingress.kubernetes.io/canary-by-header: "canary"
    nginx.ingress.kubernetes.io/canary-by-header-value: "true"
spec:
  rules:
  - host: ostad-capstone-prod.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ostad-capstone-canary-service
            port:
              number: 80
---
# ServiceMonitor for Prometheus monitoring
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: ostad-capstone-canary-monitor
  namespace: prod
  labels:
    app: ostad-capstone
    strategy: canary
spec:
  selector:
    matchLabels:
      app: ostad-capstone
      strategy: canary
  endpoints:
  - port: http
    interval: 30s
    path: /metrics
