# Kubeadm cluster configuration
# Generated by Ansible for {{ ansible_hostname }}
# Ostad Capstone Project - Production Kubernetes Cluster

apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
kubernetesVersion: v{{ kubernetes_version }}
clusterName: {{ cluster_name }}
controlPlaneEndpoint: {{ kubeadm_config.control_plane_endpoint }}
apiServer:
  advertiseAddress: {{ ansible_default_ipv4.address }}
  bindPort: {{ kubeadm_config.api_server_port }}
  certSANs:
    - {{ ansible_default_ipv4.address }}
    - {{ ansible_hostname }}
    - {{ kubeadm_config.control_plane_endpoint }}
    - localhost
    - 127.0.0.1
  extraArgs:
    audit-log-maxage: "30"
    audit-log-maxbackup: "10"
    audit-log-maxsize: "100"
    audit-log-path: /var/log/audit.log
    enable-admission-plugins: NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota,NodeRestriction
  timeoutForControlPlane: 4m0s
controllerManager:
  extraArgs:
    bind-address: 0.0.0.0
scheduler:
  extraArgs:
    bind-address: 0.0.0.0
etcd:
  local:
    dataDir: {{ etcd_data_dir }}
networking:
  serviceSubnet: {{ kubeadm_config.service_subnet }}
  podSubnet: {{ kubeadm_config.pod_subnet }}
  dnsDomain: {{ cluster_domain }}
dns:
  type: CoreDNS
imageRepository: {{ kubeadm_config.image_repository }}

---
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: {{ ansible_default_ipv4.address }}
  bindPort: {{ kubeadm_config.api_server_port }}
nodeRegistration:
  criSocket: unix:///var/run/containerd/containerd.sock
  kubeletExtraArgs:
    cloud-provider: external
    container-runtime-endpoint: unix:///var/run/containerd/containerd.sock

---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
mode: ipvs
ipvs:
  strictARP: true
clusterCIDR: {{ kubeadm_config.pod_subnet }}

---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
cgroupDriver: systemd
containerRuntimeEndpoint: unix:///var/run/containerd/containerd.sock
clusterDNS:
  - {{ cluster_dns_ip }}
clusterDomain: {{ cluster_domain }}
serverTLSBootstrap: true
rotateCertificates: true
